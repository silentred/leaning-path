# add user

adduser jason
usermod -aG sudo jason

# install softwares

sudo apt-get update --fix-missing
sudo apt-get install build-essential supervisor unzip transmission-cli transmission-common transmission-daemon libssl-dev libsodium-dev aria2
sduo service transmission-daemon stop

# install v2ray

wget https://git.io/v2ray.sh
sudo bash v2ray.sh

# add config

apppend "export PATH=$PATH:/home/jason/bin" to ~.bashrc 
source .bashrc
copy conf/lunnel.conf to /etc/supervisor/conf.d/
copy settings.json to /etc/transmission/

# install transmission theme

wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh
bash install-tr-control-cn.sh

# install prometheus

sudo apt-get install prometheus
vim /etc/prometheus/promethues.yaml
```
- job_name: node
    scrape_interval: 15s
    scrape_timeout: 5s
    static_configs:
            - targets: ['localhost:9100', '140.238.33.60:9100', '144.202.10.97:9100'
```

# isntall grafana

wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
sudo apt-get update
sudo apt-get install grafana

# key config files

lunnul.conf
```
[program:lunnel]
command=lunnelSer -c config.yml
directory=/home/jason/conf/lunnel

#[program:ssserver]
#command=ssserver -c config.json --log-file ss.log start
#directory=/home/jason/conf

[program:caddy]
command=caddy -conf /home/jason/conf/Caddyfile
user=jason

[program:aria2c]
command=aria2c --conf-path=/home/jason/conf/aria2.conf 
user=jason

[program:tailer]
directory=/home/jason/conf/tailer
command=/home/jason/conf/tailer/tailer -city='xxx'
```

lunnel/config.yaml
```
server_domain: 10.0.0.2 
http_port: 8082
https_port: 8443
port: 8080
aes:
  secret_key: BXrg9LkVGZQaLjVrCCHhIuTnuoqfevgv7 
```

aria2.conf
```
check-certificate=false
max-tries=0
max-concurrent-downloads=4
dir=/home/jason/www/video
user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36
http-user=jason
http-passwd=jason
rpc-listen-port=8880
rpc-secret=jason
enable-rpc=true
rpc-listen-all=true
disable-ipv6=true
file-allocation=trunc
save-session-interval=60
#input-file=aria2.session
save-session=aria2.session
```

Caddyfile (for local fs server)
```
localhost:8089
basicauth / jason jason
root /home/jason/www
log /home/jason/www/access.log
gzip
browse
markdown
```

append to /etc/caddy/Caddyfile
```

http://files.xxx.iloveplayinggolang.xyz {
    proxy / localhost:8089
    header / {
      Access-Control-Allow-Origin  *
      Access-Control-Allow-Methods "GET, POST, OPTIONS"
    }
}

http://bt.xxx.iloveplayinggolang.xyz {
    proxy / localhost:9091
}

http://aria.xxx.iloveplayinggolang.xyz {
    proxy / localhost:6801
}

http://grafana.xxx.iloveplayinggolang.xyz {
    proxy / localhost:3000
}
```

# VPS isntall jellyfin

```
sudo docker run -d --name jellyfin --user 1002:1002 --privileged --net=host  --volume /home/jason/jellyfin/config:/config  --volume /home/jason/jellyfin/cache:/cache  --mount type=bind,source=/home/jason/www/video,target=/media  --mount type=bind,source=/mnt,target=/mnt -v /dev:/dev jellyfin/jellyfin

```

# TrueNAS Setup

```
# configure DNS, Route
/etc/netcli

# add jason to video group to use /dev/dri/renderXXX
sudo usermod -a -G video jason

# cp /etc/docker/daemon.json /etc/docker/my-daemon.json 
{"data-root": "/root/docker", "exec-opts": ["native.cgroupdriver=cgroupfs"]}

# edit docker service
vim /lib/systemd/system/docker.service
# find line, and add --config-file
ExecStart=/usr/bin/dockerd --config-file=/etc/docker/my-daemon.json

```

# 生产SSL证书
```
https://marcincuber.medium.com/lets-encrypt-generating-wildcard-ssl-certificate-using-certbot-ae1c9484c101
https://medium.com/@saurabh6790/generate-wildcard-ssl-certificate-using-lets-encrypt-certbot-273e432794d7

sudo apt install software-properties-common
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get install certbot

sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok --agree-tos -d "*.oracle2.iloveplayinggolang.xyz" --email=silentred3@gmail.com

tls /etc/letsencrypt/live/oracle2.iloveplayinggolang.xyz/cert.pem /etc/letsencrypt/live/oracle2.iloveplayinggolang.xyz/privkey.pem

===

sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok --agree-tos -d "*.ny.iloveplayinggolang.xyz" --email=silentred3@gmail.com

tls /etc/letsencrypt/live/ny.iloveplayinggolang.xyz/cert.pem /etc/letsencrypt/live/ny.iloveplayinggolang.xyz/privkey.pem

===

sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok --agree-tos -d "*.oracle.iloveplayinggolang.xyz" --email=silentred3@gmail.com

tls /etc/letsencrypt/live/oracle.iloveplayinggolang.xyz/cert.pem /etc/letsencrypt/live/oracle.iloveplayinggolang.xyz/privkey.pem
```


# Run apps in docker

```
# run lunnel
sudo docker run --network host -d --name=lunnel --restart=always -v /mnt/shenzhou-500G/oldpc/jason/lunnel/lunnel.yaml:/lunnel.yaml silentred/lunnel-cli

# run portainer
sudo docker run -d --net=host --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /mnt/shenzhou-500G/oldpc/jason/portainer-data:/data portainer/portainer-ce

# run jellyfin
sudo docker run -d --restart unless-stopped --name jellyfin --user 1000:1000 --privileged --net=host  --volume /mnt/shenzhou-500G/oldpc/jason/jellyfin/config:/config  --volume /mnt/shenzhou-500G/oldpc/jason/jellyfin/cache:/cache  --mount type=bind,source=/mnt/Toshiba-202105-3T/videos-202105,target=/media -v /mnt:/mnt -v /dev/dri:/dev/dri --group-add=107 jellyfin/jellyfin

# run aria2 service
sudo docker run -d \
  --name aria2-pro \
  --restart unless-stopped \
  --log-opt max-size=1m \
  -e PUID=$UID \
  -e PGID=1000 \
  -e UMASK_SET=022 \
  -e RPC_SECRET=jason \
  -e RPC_PORT=6800 \
  -p 6800:6800 \
  -v /mnt/shenzhou-500G/oldpc/jason/aria2:/config \
  -v /mnt/shenzhou-500G/oldpc/jason/downloads:/downloads \
  -v /mnt:/mnt \
  p3terx/aria2-pro
  
  // aria2 service udp 作用未知
  -e LISTEN_PORT=6888 \
  -p 6888:6888 \
  -p 6888:6888/udp \

# run aria ng web service
# https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html
sudo docker run -d \
  --name ariang \
  --log-opt max-size=1m \
  --restart unless-stopped \
  -p 6880:6880 \
  p3terx/ariang


# 2合1镜像, 6880 webui, 6900 rpc
sudo docker run -d \
    --name aria2ui \
    --restart unless-stopped \
    --log-opt max-size=1m \
    -p 6880:8080 \
    -p 6900:6800 \
    -v /home/pi/www/video/exfat2T:/aria2/data \
    -v /home/pi/aria2:/aria2/conf \
    -e PUID=1000 \
    -e PGID=1000 \
    -e ARIA2RPCPORT=6900 \
    -e RPC_SECRET=jason \
    hurlenko/aria2-ariang

```

# 客户端ca证书配置

```
检查缺少的 root ca cert
https://superuser.com/questions/437330/how-do-you-add-a-certificate-authority-ca-to-ubuntu
https://serverfault.com/questions/755248/curl-unable-to-get-local-issuer-certificate-how-to-debug

openssl s_client -connect files.oracle.iloveplayinggolang.xyz:443


下载文件
https://letsencrypt.org/certificates/
Active
Let’s Encrypt R3 (RSA 2048, O = Let's Encrypt, CN = R3
https://letsencrypt.org/certs/lets-encrypt-r3.pem

下载到 /usr/share/ca-certificates/mozilla/ 目录下

添加文件到 /etc/ca-certificates.conf

sudo update-ca-certificates
```

# run caddy

```
docker run --restart=unless-stopped --name caddy -d -p 8089:8089 \
-v /mnt/shenzhou-500G/oldpc/jason/caddy/Caddyfile:/etc/caddy/Caddyfile \
-v /mnt:/mnt caddy
```

Caddyfile
```
:8089

root * /mnt

templates
file_server browse
encode gzip
```

HTML and Markdown
```
list.html

<!DOCTYPE html>
<html>
        <head>
                <title>TrueNAS</title>
        </head>
        <body>
                <main>
                        <div class="article-container">
                                <article class="paper paper3">
                                        {{include "index.md" | markdown}}
                                </article>
                        </div>
                        <div class="sidebar"></div>
                </main>
        </body>
</html>


index.md

# TrueNAS Services

- [Console](http://192.168.199.6)
- [Portainer](http://192.168.199.6:9000)
- [Aria2](http://192.168.199.6:6880)
- [Jellyfin](http://192.168.199.6:8096)
```

# edit fstab

/conf/base/etc/fstab
```
boot-pool/grub  /boot/grub      zfs     relatime,defaults       0       0
tmpfs   /run/lock       tmpfs   rw,nosuid,nodev,noexec,relatime,size=100m       0       0
PARTUUID=008bddee-01    /mnt/exfat2T     exfat   umask=0,uid=jason,gid=jason
```


# create bash file
~/.bash_profile

```
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi
```

~/.bashrc

```
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -lah'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
```


# certbot

```
sudo certbot certonly --manual --preferred-challenges=dns --server https://acme-v02.api.letsencrypt.org/directory --manual-public-ip-logging-ok --agree-tos -d "*.SUB.DOMAIN.TOP" --email=MYGMAIL@gmail.com
```