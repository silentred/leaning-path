/目录和/usr可以较大。
/ --- 10G
/uar --- 8G
/home --- 4G
/boot --- 100M

剩余的空间可以都分给 / 和 /usr


挂载光驱
mount /dev/cdrom ~/cdrom

ifconfig没找到
yum install net-tools
其他常用软件：
yum group install "Development Tools"
yum install java vim python
yum grouplist 查看有哪些group可以安装

设置固定ip
sudo vim /etc/sysconfig/network-scripts/ifcfg-eth0 #根据网卡名字不同
BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址
IPADDR=192.168.1.105 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址
NETMASK=255.255.255.0 #网卡对应的网络掩码
本来默认的是dhcp，改为static，配置下ip，掩码就行；
IPV6INIT=no 关闭ipv6
#DNS1=114.114.114.114 设置DNS,不确定，再查查
#DNS2=8.8.4.4
重启：sudo service network restart


rpm命令的解释
－ivh：安装显示安装进度--install--verbose--hash
－Uvh：升级软件包--Update；
－qpl：列出RPM软件包内的文件信息[Query Package list]；
－qpi：列出RPM软件包的描述信息[Query Package install package(s)]；
－qf：查找指定文件属于哪个RPM软件包[Query File]；
－Va：校验所有的RPM软件包，查找丢失的文件[View Lost]；
－e：删除包


安装sphinx RPM包时，缺少libodbc.so.2的解决方法：
yum -y install unixODBC

安装php
#wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#sudo rpm -Uvh epel-release-latest-7*.rpm
#yum install php php-fpm php-mysqli php-gd php-pear php-mcrypt php-devel

如果安装rpm出现错误：Cannot retrieve metalink for repository: epel.
执行以下命令：sudo yum upgrade ca-certificates --disablerepo=epel
更新完成后问题修复。

安装php for centos 7
sudo rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm
sudo rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
sudo yum install php56w php56w-opcache php56w-cli php56w-common php56w-devel php56w-fpm php56w-gd  php56w-mbstring  php56w-mcrypt php56w-pdo php56w-mysqlnd php56w-pecl-xdebug php56w-pecl-memcache php56w-phpdbg

#php56w-pecl-xdebug.x86_64 上面的已经包含了
查看有哪些php相关的软件可以按照
yum list php56w*

php for centos 6.8
http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
#or use this: wget https://mirror.webtatic.com/yum/el6/latest.rpm
rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm
yum install php56w php56w-opcache php56w-cli php56w-common php56w-devel php56w-fpm php56w-gd  php56w-mbstring  php56w-mcrypt php56w-pdo php56w-mysqlnd php56w-pecl-memcache


关闭centos7的防火墙：
sudo systemctl stop firewalld
sudo systemctl disable firewalld
systemctl status firewalld # 查看状态

新建无home目录，不可登录shell的用户。-M代表不创建home目录
useradd -M -s /sbin/nologin userName
#--shell /bin/false貌似也可以


关闭php-fpm
kill -INT `cat /usr/local/php/var/run/php-fpm.pid`
kill -INT `cat /var/run/php-fpm/php-fpm.pid`
启动php-fpm
/usr/local/php/sbin/php-fpm
/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.conf
测试php-fpm的配置文件
/usr/local/php/sbin/php-fpm -t
#重启php-fpm
kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`
kill -USR2 `cat /var/run/php-fpm/php-fpm.pid` # 针对yum安装的

nginx测试配置
/usr/local/nginx/sbin/nginx -t
nginx重启
/usr/local/nginx/sbin/nginx -s reload

设置ssh private key登陆
用工具（例如ssh-keygen,xshell等）生成一对秘钥，把生成的id_rsa_2048.pub复制到远程的/home/user/.ssh/下，重命名为 authorized_keys, 保证.ssh目录和其中文件权限700，重启ssh服务。
在本地用私钥登陆。
将私钥加入到list
eval `ssh-agent`
ssh-add ~/.ssh/id_rsa_2048

windows下的操作：
#ssh-agent bash #进入bash
#eval `ssh-agent`
#ssh-add /.ssh/id_rsa_2048 #这个文件是在Git的安装目录下的.ssh目录下的，很变态，因为存在一个user/.ssh，一开始误以为把私钥放在这里
new result:发现是缺少环境变量HOME,ssh -T git@github.com的时候，默认去找private key的位置是%HOME%/.ssh, 只要设置环境变量
set HOME=%USERPROFILE%, USERPROFILE就是C:\Users\username这个目录，在其中 mkdir .ssh，再把key放进去就可以了.但是key的名字目前还是根据默认的去查找，看看能否改变默认名称.好像是修改.ssh/config中的内容，http://stackoverflow.com/questions/9672975/switching-between-multiple-ssh-keys-in-git-on-windows
验证：先设置HOME，创建HOME/.ssh/目录，私钥放入其中，进入 ssh-agent bash 运行 eval `ssh-agent`, ssh-add /.ssh/id_rsa 。


TAR的压缩
tar -czf target.tar.gz /source #v是verbose,文件太多不要加
解压
tar xf xxx.tar

Centos的systemd service脚本位置：
/usr/lib/systemd/system


python PIL不支持jpeg的解决办法：（IOError: decoder jpeg not available）
sudo yum -y install zlib zlib-devel libjpeg libjpeg-devel freetype freetype-devel
pip install PIL --allow-external PIL --allow-unverified PIL


查看线程
ps -eLf | grep xxx
UID为User ID.
PID为processid,进程标识符
PPID为 parent processid，父进程标识符2，
LWP为light weight process orthread， 轻量级进程，即线程标识符
NLWP为，number oflwps(threads) in the process, 线程的数量


CentOS 7 安装 mysql
wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm
sudo yum install mysql-server
sudo systemctl start mysqld

CentOS 6 安装 mysql
wget http://repo.mysql.com/mysql-community-release-el6-5.noarch.rpm

mysql 5.7 yum install problem

https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/
sudo rpm -Uvh mysql57-community-release-el6-n.noarch.rpm
sudo yum install mysql-community-server
sudo grep 'temporary password' /var/log/mysqld.log
mysql -u root -p rwK2kFg--bb%

validate_password_dictionary_file    |        |
| validate_password_length             | 8      |
| validate_password_mixed_case_count   | 1      |
| validate_password_number_count       | 1      |
| validate_password_policy             | MEDIUM |
| validate_password_special_char_count | 1

这些int变量都用 set global validate_password_length=0; 设置为0，才能用
set password = password('root'); 设置新密码。

select * from mysql.plugin where name='validate_password';
不知道这里删除这条记录是否能disable这个插件。


## 升级GCC
$ sudo wget http://people.centos.org/tru/devtools-2/devtools-2.repo -P /etc/yum.repos.d
$ sudo sh -c 'echo "enabled=1" >> /etc/yum.repos.d/devtools-2.repo'
$ sudo yum install devtoolset-2
$ scl enable devtoolset-2 bash
$ gcc --version

如果 devtoolset-2 安装失败，试试：
devtoolset-2-build
devtoolset-2-perftools
devtoolset-2-toolchain


## Nginx For PHP 403问题
laravel部署如果遇到403 forbidden, 除了检查nginx, php-fpm的user,group, 还需要检查配置文件中是否指定了 index index.php index.html; 这个配置，如果不指定的话，是没有默认值的。 所以会导致去读一个目录而不是文件。



## centos 6 安装 g++ 4.7 c++11
visit website: http://people.centos.org/tru/devtools-1.1
download file : http://people.centos.org/tru/devtools-1.1/devtools-1.1.repo
/etc/yum.repos.d/devtools-1.1.repo
yum clean all
yum install devtoolset-1.1

完成后安装在 `/opt/centos/devtoolset-1.1/root/usr/bin/` 目录下，运行：

ln -s /opt/centos/devtoolset-1.1/root/usr/bin/* /usr/local/bin/
hash -r
g++ --version

## 安装 libiconv
http://www.gnu.org/software/libiconv/#downloading
./confugure
make && make install
文章中建议安装完成后重新编译 gettext

## 安装 gettext
http://ftp.gnu.org/pub/gnu/gettext/
./confugure
make && make install

## libxml2
依赖python-devel

ldconfig

## yum repo
yum -y --enablerepo=remi,remi-test install redis

## install ffmpeg
/etc/yum.repos.d/dag.repo
[dag]
name=Dag RPM Repository for Red Hat Enterprise Linux
baseurl=http://apt.sw.be/redhat/el$releasever/en/$basearch/dag
gpgcheck=1
enabled=1

yum install ffmpeg ffmpeg-devel

To fix rpmforge GPG key warning:
rpm -Uhv http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm
rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt

## 检测视频完整度
ffmpeg -v error -i file.avi -f null - 2>error.log
ffprobe xxx.mp4

## grep多个文件
grep -r "something" dir
-l: 只打印文件名，不打印匹配到的内容

## 何如在vim 打开但没有写权限的状况下 强制写入
:w !sudo tee > /dev/null %

w ! 把 当前内容的 数据流 给 下一个命令
tee 把 数据流 导入到 null 和 当前路径的文件(% 表示 当前文件的全路径)

## 如何判断 text 文件的编码类型
file -i text.txt // in Linux
file -I text.txt // in Mac

## 如何转码 text 文件
iconv -f $FROM_ENCODE -t $TO_ENCODE old.txt > new.txt
iconv -l // 查看支持的 encoding 列表

## 查看 glibc version
ldd --version

## 复制文件内容
cat file | pbcopy
pbpaste // 粘帖


## 找到哪个进程占用了某个端口

sudo netstat -anp | grep 8080

最后一列会显 pid/user 例如 100123/root


## Redis delete

EVAL "return redis.call('del', unpack(redis.call('keys', ARGV[1])))" 0 dc_go:*

## package version

yum info kubelet
yum list kubelet

apt-cache search keyword

## 降低mp4质量

ffmpeg -i input-HD.mp4 -vf scale=iw/1.5:-1 -vcodec libx264 -crf 20 output.mp4
ffmpeg -i input.mp4 -vf scale=640:360 output.mp4

## 截取时间, 而不 re-encode
ffmpeg -i movie.mp4 -ss 01:00:00 -t 02:41:55 -async 1 -c copy cut.mp4

## 每10分钟截图一次，输出为 thumb0001.jpg,
ffmpeg -i test.flv -vf fps=1/600 thumb%04d.jpg
// fps=1/600 表示 每秒1/600个frame, 等于 每600秒1个frame.

## 输出固定时间画面
ffmpeg -i input.flv -ss 00:00:14.435 -vframes 1 out.jpg

## pip install scrapy 失败问题

for scrapy with Python 3, you'll need

sudo apt-get install python3 python-dev python3-dev \
     build-essential libssl-dev libffi-dev \
     libxml2-dev libxslt1-dev zlib1g-dev \
     python-pip

with Python 2, you'll need

sudo apt-get install python-dev  \
     build-essential libssl-dev libffi-dev \
     libxml2-dev libxslt1-dev zlib1g-dev \
     python-pip


## linux perf tools

```
CPU性能分析工具：
vmstat
ps
sar
time
strace
pstree
top
Memory性能分析工具：
vmstat
strace
top
ipcs
ipcrm
cat /proc/meminfo
cat /proc/slabinfo
cat /proc//maps
I/O性能分析工具：
vmstat
ipstat
repquota
quotacheck
Network性能分析工具：
ifconfig
ethereal
tethereal
iptraf
iwconfig
nfsstat
mrtg
ntop
netstat
cat /proc/sys/net
Linux 性能调优工具
当通过上述工具及命令，我们发现了应用的性能瓶颈以后，我们可以通过以下工具或者命令来进行性能的调整。
CPU性能调优工具：
nice / renic
sysctl
Memory性能调优工具：
swapon
ulimit
sysctl
I/O性能调优工具：
edquota
quoton
sysctl
boot line:
elevator=
Network性能调优工具：
ifconfig
iwconfig
sysctl
```

## linux 检查进程开启的线程PID

ps -efL | grep <Process Name>

          PPID       PID
wangyang 28063     1 28063  0   12 10:52 ?        00:00:00 ./entree -vv=3 -log_dir=/data/logs/logdir
wangyang 28063     1 28064  0   12 10:52 ?        00:00:00 ./entree -vv=3 -log_dir=/data/logs/logdir
wangyang 28063     1 28065  0   12 10:52 ?        00:00:01 ./entree -vv=3 -log_dir=/data/logs/logdir
wangyang 28063     1 28066  0   12 10:52 ?        00:00:00 ./entree -vv=3 -log_dir=/data/logs/logdir

// 如何strace多线程 程序
strace -f -p 28063


## install ststem tap

```
uname -r
yum install kernel-devel 或者 kernel-devel-$(uname -r)
yum install yum-utils kernel-devel perf
debuginfo-install kernel-$(uname -r)

```

## centos7 安装

```
# flush iptables
iptables -F

# nginx
yum install -y nginx

# mk www
mkdir /home/www
cd /home/www
chown -R nginx:nginx /home/www
wget https://release.larsjung.de/h5ai/h5ai-0.29.0.zip
unzip h5ai-0.29.0.zip
vim /etcd/nginx/nginx.conf

root         /home/www;
index index.html index.php index.htm index.nginx-debian.html /_h5ai/public/index.php;
location ~ \.php$ {
        include phpfpm.conf;
        fastcgi_pass 127.0.0.1:9000;
}

#phpfpm.conf
fastcgi_split_path_info ^(.+\.php)(/.+)$;
try_files $fastcgi_script_name =404;
set $path_info $fastcgi_path_info;
fastcgi_param PATH_INFO $path_info;
fastcgi_index index.php;
include fastcgi.conf;

# php
rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
yum install -y php71w-fpm mod_php71w php71w-cli php71w-common

# aria2
yum install -y aria2
apt-get install aria2
aria2c --enable-rpc --rpc-listen-all --rpc-secret jason -D

# transmission
yum install -y transmission-cli transmission-common transmission-daemon
systemctl start transmission-daemon.service
systemctl stop transmission-daemon.service
ln -s /var/lib/transmission/.config/transmission-daemon/settings.json ~/setting.json
vim ~/setting.json
```

### wkhtmltoimage 安装和使用

centos中安装可能缺少一个动态lib:
yum install libXrender
使用中可能缺少中文字体库，导致中文字体变成方块:
yum install wqy-zenhei-fonts

可以解决


## code lines by author

git log --no-merges --pretty=format:%an --numstat | awk '/./ && !author { author = $0; next } author { ins[author] += $1; del[author] += $2 } /^$/ { author = ""; next } END { for (a in ins) { printf "%10d %10d %10d %s\n", ins[a] - del[a], ins[a], del[a], a } }' | sort -rn

insertion-deletion, insertion, deletion, name


翻墙攻略:

## 购买VPS

http://www.vultr.com/?ref=7138535 (推广链接), 选择 日本 节点，5$/month 实例, 按小时计费。建议用 ubuntu。

## 搭建 ss 服务端

```
## add user: https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart

adduser jason
usermod -aG sudo jason

sudo apt-get update --fix-missing
sudo apt-get install build-essential supervisor nginx unzip python-pip transmission-cli transmission-common transmission-daemon libssl-dev python-setuptools python-dev libsodium-dev

#可以不安装 php7.2-fpm php7.2-cli php7.2 php7.2-common php7.2-dev php7.2-curl php7.2

sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@master
OR pip install shadowsocks


sudo lsblk
sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb
sudo mkdir -p /mnt/disks/disk1
sudo mount -o discard,defaults /dev/sdb /mnt/disks/disk1

sudo blkid /dev/sdb
/dev/sdb: UUID="5ad1b168-7d45-4035-a9e4-4273396116fa" TYPE="ext4"

sudo cp /etc/fstab /etc/fstab.bak
sudo vim /etc/fstab
UUID=bfc332f6-be10-4206-8d44-289434be3354 /mnt/disks/disk1 ext4 discard,defaults,nofail 0 2

// optional: 使用 SSL
sudo mkdir /etc/ssl/private
sudo chmod 700 /etc/ssl/private
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7

```
server {
    listen 443 http2 ssl;
    listen [::]:443 http2 ssl;

    server_name 45.32.11.72;

    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    ########################################################################
    # from https://cipherli.st/                                            #
    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html #
    ########################################################################

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    ##################################
    # END https://cipherli.st/ BLOCK #
    ##################################

    root /home/www;

    # Add index.php to the list if you are using PHP
    index index.html index.php index.htm index.nginx-debian.html /_h5ai/public/index.php;

    location /ui {
                auth_basic "Restricted";
                auth_basic_user_file /etc/nginx/.htpasswd;
        }

    location ~ /video/.+mp4$ {
                return 404;
        }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.2-fpm.sock;
    }
}
```

```

配置文件 config.json
```
{
    "server":"45.32.11.27",
    "server_port":28388,
    "local_address": "127.0.0.1",
    "local_port":1080,
    "password":"890917123",
    "timeout":300,
    "method":"rc4-md5",
    "fast_open": false,
	"workers": 2
}
```
启动服务
ssserver -c config.json --log-file ss.log -d start

## 终端客户端

1. Mac
使用 ShadowsocksX-NG
下载地址 https://github.com/shadowsocks/ShadowsocksX-NG/releases
安装后需要配置服务连接信息，就是服务器config文件中的信息。
客户端是基于域名名单的路由，默认内置一份 gfwlist。一般情况，使用 Proxy Autho Configure Mode 即可，国内域名的网站不会走vps流量。

2. iPhone
使用 SsrConnectPro，免费。


## 路由器

如果觉得手机，桌面客户端不方便，可以考虑把客户端装在路由器上，我用的是 极路由，开发者模式下，可以用 https://github.com/qiwihui/hiwifi-ss 项目中的方案. 在路由器管理界面中有一个页面配置，开关。


## daemonize

如果要 daemonize 一个程序，步骤为:
1. fork, 结束父进程，子进程已经在后台运行
2. setsid, 设置子进程为 session leader，process group leader，此时子进程已经脱离原来的 controlling terminal (CTTY).
3. sinal, 忽略 SIGHUP, SIGCHLD
我认为下面的步骤不是必须:
fork again & let the parent process terminate to ensure that you get rid of the session leading process. (Only session leaders may get a TTY again.)
chdir - Change the working directory of the daemon.
umask - Change the file mode mask according to the needs of the daemon.
close - Close all open file descriptors that may be inherited from the parent process.


## SSH 配置
Host *
ForwardAgent yes
ServerAliveInterval 10
ServerAliveCountMax 10000
TCPKeepAlive no
ControlMaster auto
ControlPath ~/.ssh/%h-%p-%r
ControlPersist 4h
Compression yes


## 配置static ip

```
# 查看所有 iface
ifconfig -a

# 修改配置
vim /etc/network/interfaces

auto enp0s8
iface enp0s8 inet static
address 192.168.99.103
netmask 255.255.255.0
network 192.168.99.0
broadcst 192.168.99.255
gateway 192.168.99.1

# 启动配置
ifdown enp0s8
ifup enp0s8

```

## 修改 route

```
# 查看路由表
route -n
ip route list
打印

# 删除路邮项, del 后面的参数，是 ip route list 的输出
ip route del default via 192.168.99.1 


```


## vbox 

```
# 列表
VBoxManage list vm

#启动VM
VBoxManage startvm $vmName --type headless

#暂停
VBoxManage controlvm $vmName pause|resume|reset|poweroff|savestate 

# 安装 addtions 插件
# 菜单栏选择 insert VBoxAddtions.ios 名字不准确
mkdir /mnt/cdrom
sudo mount /dev/cdrom /mnt/cdrom
cd /mnt/cdrom
sudo ./VBoxAddtionsxxxx.run
cd
sudo umount /mnt/cdrom
reboot

# 添加共享文件
VBoxManage sharedfolder add ubuntu --name src --hostpath /Users/jason/Desktop/projects/GOPATH/src
mkdir /home/jason/go/src
sudo mount -t vboxsf -o uid=1000,gid=1000 src /home/jason/go/src

# auto-mount 的位置在 /media/sf_$shareFileName

```


## ubuntu 18.04 安装docker

```
sudo apt update
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
sudo apt install docker-ce

```

## SSH tunnel

ssh -nN -R 8888:localhost:7777 remoteuser@1.2.3.4
ssh -nNT -R 8022:localhost:8080 jason@45.76.186.191

这样，访问远端 1.2.3.4:8888 的请求，就会转发到 localhost:7777， 所以要求本地:7777 有服务
-R 表示 Remote port forwarding，转发远端8888到本地7777

服务器端， sudo vim /etc/ssh/sshd_config, 搜索 AllowTCP, AllowAgent, GatewayPorts, 把关于 forwording 的选项都打开， 重启sshd

ssh -f -n -N -T -R 6022:localhost:22 -R 6080:localhost:80 -R 6801:localhost:6800 jason@45.76.186.191

## 写入镜像

### mac
sudo dd if=/tmp/2018-10-09-raspbian-stretch.img of=/dev/rdisk2 bs=4m
sync

## raspberry

## 启动ssh的方法, touch /boot/ssh , 创建一个名为ssh 的文件

## 设置wifi：创建文件 /boot/wpa_supplicant.conf ， 内容为:
```
country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
ssid="HiWiFi_930F44_CaO"
psk="wangyang"
key_mgmt=WPA-PSK
priority=1
}

network={
ssid="Jason iPhone"
psk="789456123"
key_mgmt=WPA-PSK
priority=2
}
```


## samba

```
sudo apt-get install samba samba-common-bin
sudo vim /etc/samba/smb.conf

[share]
Comment = Pi shared folder
Path = /home/pi/www/video
Browseable = yes
Writeable = Yes
only guest = no
create mask = 0777
directory mask = 0777
Public = yes
Guest ok = no

sudo smbpasswd -a pi # pwd=wangyang
sudo /etc/init.d/samba restart

```

## exfat

```
# mount for exfat
sudo apt-get install exfat-utils
# 如果是 exfat，建议把 umask 设为0; ntfs-3g 可以用 022
<<<<<<< HEAD
sudo mount -t exfat -o umask=0,uid=pi,gid=pi /dev/sda1 /home/pi/www/video/exfat2T
sudo mount -t ntfs-3g -o umask=022,uid=pi,gid=pi /dev/sdc1 /home/pi/www/video/ntfs1T
sudo mount -t hfsplus -o force,umask=0,uid=pi,gid=pi /dev/sdb1 /home/pi/www/video/apfs1T
||||||| merged common ancestors
sudo mount -t exfat -o umask=0,uid=pi,gid=pi /dev/sdd1 /home/pi/www/video/exfat2T
sudo mount -t ntfs-3g -o umask=022,uid=pi,gid=pi /dev/sdb1 /home/pi/www/video/ntfs1T
sudo mount -t hfsplus -o force,umask=0,uid=pi,gid=pi /dev/sda1 /home/pi/www/video/apfs1T
=======
sudo mount -t exfat -o umask=0,uid=pi,gid=pi /dev/sdb1 /home/pi/www/video/exfat2T
sudo mount -t ntfs-3g -o umask=022,uid=pi,gid=pi /dev/sda1 /home/pi/www/video/ntfs1T
sudo mount -t hfsplus -o force,umask=0,uid=pi,gid=pi /dev/sdc1 /home/pi/www/video/apfs1T
>>>>>>> 2db4b78d14a581c1d74ce294844a796016c6c72c
# unmount
sudo umount /dev/sda1

# mount for ntfs
sudo apt-get install ntfs-3g
# 尝试 mount -t ntfs-3g

# 查看 kernel module， 是否有 ntfs
lsmod 

# 编译 ntfs-3g
# download page: http://www.linuxfromscratch.org/blfs/view/svn/postlfs/ntfs-3g.html
cd ntfs-3g
./autogen.sh
./configure --prefix=/usr --with-fuse=external
sudo make
make install
sudo ln -sv ../bin/ntfs-3g /sbin/mount.ntfs
sudo ln -sv ntfs-3g.8 /usr/share/man/man8/mount.ntfs.8

```

## docker 

sudo dockerd --data-root /home/admin/dockerdata -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock

启动dockerd 遇到报错: Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network

```
ip link add name docker0 type bridge
ip addr add dev docker0 192.168.0.1/16
```


## 合并 ts 文件到 mp4
```
for i in `ls *.ts | sort -V`; do echo "file $i"; done >> mylist.txt
ffmpeg -f concat -i mylist.txt -c copy -bsf:a aac_adtstoasc video.mp4

# 补充
ls --sort=size -l | tail -81 | awk '{print $9}' | awk '{ match($0, /seg-([0-9]+).ts/, arr); if(arr[1] != "") print arr[1] }' > lost.file
for i in `cat lost.file`; do
    xxx;
done

```

## chattr,lsattr
```
查看文件属性，
a 表示 append-only，会导致文件无法删除
e 表示 extend format
lsattr filename

删除 a 属性
chattr -a filename 
```

## oracle cloud 主机需要关闭防火墙
```
#停止firewall
systemctl stop firewalld.service
 
#禁止firewall开机启动
systemctl disable firewalld.service
 
#关闭iptables
service iptables stop
 
#去掉iptables开机启动
chkconfig iptables off

sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -F
```

## 安装pyspider

```
sudo apt-get install python python-dev python-distribute python-pip libcurl4-openssl-dev libxml2-dev libxslt1-dev python-lxml libssl-dev zlib1g-dev beanstalkd

pip install beanstalkc
pip uninstall wsgidav
python -m pip install wsgidav==2.4.1


## 打印视频基本信息
```
ffprobe video.mp4 -v quiet -print_format json -show_format -show_streams
```


## VPN 配置

3.115.9.91

```
# config.json
{
  "message_queue": "beanstalk://localhost:11300/",
  "webui": {
    "username": "jason",
    "password": "jason",
    "need-auth": true
  }
}


# 启动脚本 run.sh
#!/bin/bash
BASEDIR=$(dirname "$0")
NAME="pyspider"
PIDFILE="pyspider.pid"
start() {
    $NAME -c=config.json > out.log 2>&1 &
    echo $! > $BASEDIR/$PIDFILE
}
stop() {
    pid=`cat $BASEDIR/$PIDFILE`
    # send SIGTERM to pid
    pkill $NAME && rm $BASEDIR/$PIDFILE
}
restart() {
    stop
    start
}
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
esac
exit
```


## 安装 prometheus, grafana, node_exporter
```
sudo apt-get install prometheus

# grafana
https://grafana.com/docs/installation/debian/
sudo apt-get install -y software-properties-common
sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
sudo apt-get update
sudo apt-get install grafana

# node exporter
curl -LO https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz
tar -xvf node_exporter-0.18.1.linux-amd64.tar.gz
sudo mv node_exporter-0.18.1.linux-amd64/node_exporter /usr/local/bin/

sudo cat > /etc/systemd/system/node_exporter.service <<EOF
[Unit]
Description=Node Exporter
After=network.target
 
[Service]
User=jason
Group=jason
Type=simple
ExecStart=/usr/local/bin/node_exporter
 
[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl start node_exporter
```

# openwrt设置默认网关和DNS
```
# 网关
uci add_list dhcp.lan.dhcp_option="3,192.168.199.100"
uci add_list dhcp.lan.dhcp_option="6,223.5.5.5"
# DNS
uci add_list dhcp.lan.dhcp_option="6,192.168.199.1"
# 或者直接设置
uci set dhcp.lan.dhcp_option="6,223.5.5.5 6,192.168.199.1 3,192.168.199.4"
uci commit dhcp
/etc/init.d/dnsmasq restart
```

# 树莓派指定DNS, IP, 默认网关
```
vim  /etc/dhcpcd.conf

interface wlan0
static ip_address=192.168.199.100/24
static routers=192.168.199.1
static domain_name_servers=192.168.199.1

interface eth0
static ip_address=192.168.199.4/24
static routers=192.168.199.1
static domain_name_server=192.168.199.1
```

# 下载 国内ip 集合
```
wget https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt
ipset -N cn hash:net
for i in $(cat china_ip_list.txt); do sudo ipset -A cn $i; done
# 添加 cloudflare 的ip
sudo ipset add cn 104.27.175.3
sudo ipset add cn 104.27.174.3

# 需要给 iptable 添加以下规则，目标端发现是国内ip，直接
iptables -t nat -A V2RAY -p tcp -m set --match-set cn dst -j RETURN
```


ipset 启动加载

```
# 导出 ipset 文件
ipset save > /etc/ipset/ipset_file


#/etc/systemd/system/ipset-persistent.service

[Unit]
Description=ipset persistent configuration
#
DefaultDependencies=no
Before=network.target

# ipset sets should be loaded before iptables
# Because creating iptables rules with names of non-existent sets is not possible
Before=netfilter-persistent.service
Before=ufw.service

ConditionFileNotEmpty=/etc/ipset/ipset_file

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/sbin/ipset restore -file /etc/ipset/ipset_file
# Uncomment to save changed sets on reboot
# ExecStop=/sbin/ipset save -file /etc/ipset/ipset_file
ExecStop=/sbin/ipset flush
ExecStopPost=/sbin/ipset destroy

[Install]
WantedBy=multi-user.target

RequiredBy=netfilter-persistent.service
RequiredBy=ufw.service

#systemctl daemon-reload
#systemctl enable ipset-persistent.service
```

# 树莓派，启动时加载iptables
```
参考 https://discourse.osmc.tv/t/saving-iptables-firewall-rules-permanently/7286/8

iptables-save > /etc/iptables/rules.conf
vim /etc/network/if-up.d/iptables
# bash
iptables-restore /etc/iptables/rules.conf

# /etc/iptables/rules.conf 文件内容
# Generated by iptables-save v1.6.0 on Sat Mar 14 22:15:52 2020
*mangle
:PREROUTING ACCEPT [3869812:737663212]
:INPUT ACCEPT [1240067:434650889]
:FORWARD ACCEPT [2629744:303012295]
:OUTPUT ACCEPT [3937175:4992303488]
:POSTROUTING ACCEPT [6565637:5295172213]
COMMIT
# Completed on Sat Mar 14 22:15:52 2020
# Generated by iptables-save v1.6.0 on Sat Mar 14 22:15:52 2020
*nat
:PREROUTING ACCEPT [45856:5469960]
:INPUT ACCEPT [10269:2187237]
:OUTPUT ACCEPT [20514:1349502]
:POSTROUTING ACCEPT [62439:5036927]
:V2RAY - [0:0]
-A PREROUTING -p tcp -j V2RAY
-A V2RAY -d 192.168.199.4/32 -j RETURN
-A V2RAY -d 192.168.199.100/32 -j RETURN
-A V2RAY -d 0.0.0.0/8 -j RETURN
-A V2RAY -d 10.0.0.0/8 -j RETURN
-A V2RAY -d 127.0.0.0/8 -j RETURN
-A V2RAY -d 169.254.0.0/16 -j RETURN
-A V2RAY -d 172.16.0.0/12 -j RETURN
-A V2RAY -d 192.168.0.0/16 -j RETURN
-A V2RAY -d 224.0.0.0/4 -j RETURN
-A V2RAY -d 240.0.0.0/4 -j RETURN
-A V2RAY -p tcp -m set --match-set cn dst -j RETURN
-A V2RAY -p tcp -m mark --mark 0xff -j RETURN
-A V2RAY -p tcp -j REDIRECT --to-ports 12345
COMMIT
# Completed on Sat Mar 14 22:15:52 2020
```

# v2ray 本地配置, base64
```
ewogICJkbnMiIDogewogICAgInNlcnZlcnMiIDogWwogICAgICAibG9jYWxob3N0IgogICAgXQog
IH0sCiAgImluYm91bmRzIiA6IFsKICAgewogICAicG9ydCI6IDEyMzQ1LAogICAicHJvdG9jb2wi
OiAiZG9rb2RlbW8tZG9vciIsCiAgICJzZXR0aW5ncyI6IHsKICAgICAibmV0d29yayI6ICJ0Y3As
dWRwIiwKICAgICAiZm9sbG93UmVkaXJlY3QiOiB0cnVlCiAgIH0sCiAgICJzbmlmZmluZyI6IHsK
ICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgImRlc3RPdmVycmlkZSI6IFsiaHR0cCIsICJ0bHMi
XQogICB9LAogICAic3RyZWFtU2V0dGluZ3MiOiB7CiAgICAgInNvY2tvcHQiOiB7CiAgICAgICAK
ICAgICB9CiAgIH0KICAgfSwKICAgIHsKICAgICAgImxpc3RlbiIgOiAiMC4wLjAuMCIsCiAgICAg
ICJwb3J0IiA6IDEwODEsCiAgICAgICJwcm90b2NvbCIgOiAic29ja3MiLAogICAgICAidGFnIiA6
ICJzb2Nrc2luYm91bmQiLAogICAgICAic2V0dGluZ3MiIDogewogICAgICAgICJhdXRoIiA6ICJu
b2F1dGgiLAogICAgICAgICJ1ZHAiIDogZmFsc2UsCiAgICAgICAgImlwIiA6ICIxMjcuMC4wLjEi
CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJsaXN0ZW4iIDogIjAuMC4wLjAiLAogICAgICAi
cG9ydCIgOiA4MDAxLAogICAgICAicHJvdG9jb2wiIDogImh0dHAiLAogICAgICAidGFnIiA6ICJo
dHRwaW5ib3VuZCIsCiAgICAgICJzZXR0aW5ncyIgOiB7CiAgICAgICAgInRpbWVvdXQiIDogMAog
ICAgICB9CiAgICB9CiAgXSwKICAib3V0Ym91bmRzIiA6IFsKICAgIHsKICAgICAgInRhZyIgOiAi
ZGlyZWN0IiwKICAgICAgInByb3RvY29sIiA6ICJmcmVlZG9tIiwKICAgICAgInNldHRpbmdzIiA6
IHsKCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJzZW5kVGhyb3VnaCIgOiAiMC4wLjAuMCIs
CiAgICAgICJtdXgiIDogewogICAgICAgICJlbmFibGVkIiA6IGZhbHNlLAogICAgICAgICJjb25j
dXJyZW5jeSIgOiA4CiAgICAgIH0sCiAgICAgICJwcm90b2NvbCIgOiAidm1lc3MiLAogICAgICAi
c2V0dGluZ3MiIDogewogICAgICAgICJ2bmV4dCIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAg
ICJhZGRyZXNzIiA6ICJueS5zaWxlbnRyZWQuY2x1YiIsCiAgICAgICAgICAgICJ1c2VycyIgOiBb
CiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIiA6ICJhMzExZThlOC04Y2IzLTQ5
ZDQtOTY2Ni0xM2U5NDVmMDQ3NjEiLAogICAgICAgICAgICAgICAgImFsdGVySWQiIDogMjMzLAog
ICAgICAgICAgICAgICAgInNlY3VyaXR5IiA6ICJhdXRvIiwKICAgICAgICAgICAgICAgICJsZXZl
bCIgOiAwCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAicG9ydCIg
OiA0NDMKICAgICAgICAgIH0KICAgICAgICAgIAogICAgICAgIF0KICAgICAgfSwKICAgICAgInRh
ZyIgOiAiMjMzdjIuY29tX255LnNpbGVudHJlZC5jbHViIiwKICAgICAgInN0cmVhbVNldHRpbmdz
IiA6IHsKICAgICAgICAic29ja29wdCIgOiB7CgkJICAgICAgIm1hcmsiOiAyNTUKICAgICAgICB9
LAogICAgICAgICJxdWljU2V0dGluZ3MiIDogewogICAgICAgICAgImtleSIgOiAiIiwKICAgICAg
ICAgICJoZWFkZXIiIDogewogICAgICAgICAgICAidHlwZSIgOiAibm9uZSIKICAgICAgICAgIH0s
CiAgICAgICAgICAic2VjdXJpdHkiIDogIm5vbmUiCiAgICAgICAgfSwKICAgICAgICAidGxzU2V0
dGluZ3MiIDogewogICAgICAgICAgImFsbG93SW5zZWN1cmUiIDogZmFsc2UsCiAgICAgICAgICAi
YWxwbiIgOiBbCiAgICAgICAgICAgICJodHRwXC8xLjEiCiAgICAgICAgICBdLAogICAgICAgICAg
InNlcnZlck5hbWUiIDogIm55LnNpbGVudHJlZC5jbHViIiwKICAgICAgICAgICJhbGxvd0luc2Vj
dXJlQ2lwaGVycyIgOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgIndzU2V0dGluZ3MiIDogewog
ICAgICAgICAgInBhdGgiIDogIlwvZ29nb3dzIiwKICAgICAgICAgICJoZWFkZXJzIiA6IHsKICAg
ICAgICAgICAgIkhvc3QiIDogIm55LnNpbGVudHJlZC5jbHViIgogICAgICAgICAgfQogICAgICAg
IH0sCiAgICAgICAgImh0dHBTZXR0aW5ncyIgOiB7CiAgICAgICAgICAicGF0aCIgOiAiIiwKICAg
ICAgICAgICJob3N0IiA6IFsKICAgICAgICAgICAgIiIKICAgICAgICAgIF0KICAgICAgICB9LAog
ICAgICAgICJ0Y3BTZXR0aW5ncyIgOiB7CiAgICAgICAgICAiaGVhZGVyIiA6IHsKICAgICAgICAg
ICAgInR5cGUiIDogIm5vbmUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAia2NwU2V0
dGluZ3MiIDogewogICAgICAgICAgImhlYWRlciIgOiB7CiAgICAgICAgICAgICJ0eXBlIiA6ICJu
b25lIgogICAgICAgICAgfSwKICAgICAgICAgICJtdHUiIDogMTM1MCwKICAgICAgICAgICJjb25n
ZXN0aW9uIiA6IGZhbHNlLAogICAgICAgICAgInR0aSIgOiAyMCwKICAgICAgICAgICJ1cGxpbmtD
YXBhY2l0eSIgOiA1LAogICAgICAgICAgIndyaXRlQnVmZmVyU2l6ZSIgOiAxLAogICAgICAgICAg
InJlYWRCdWZmZXJTaXplIiA6IDEsCiAgICAgICAgICAiZG93bmxpbmtDYXBhY2l0eSIgOiAyMAog
ICAgICAgIH0sCiAgICAgICAgInNlY3VyaXR5IiA6ICJ0bHMiLAogICAgICAgICJuZXR3b3JrIiA6
ICJ3cyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInNlbmRUaHJvdWdoIiA6ICIwLjAuMC4w
IiwKICAgICAgIm11eCIgOiB7CiAgICAgICAgImVuYWJsZWQiIDogZmFsc2UsCiAgICAgICAgImNv
bmN1cnJlbmN5IiA6IDgKICAgICAgfSwKICAgICAgInByb3RvY29sIiA6ICJ2bWVzcyIsCiAgICAg
ICJzZXR0aW5ncyIgOiB7CiAgICAgICAgInZuZXh0IiA6IFsKICAgICAgICAgIHsKICAgICAgICAg
ICAgImFkZHJlc3MiIDogImxpZ2h0c2FpbC5zaWxlbnRyZWQuY2x1YiIsCiAgICAgICAgICAgICJ1
c2VycyIgOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIiA6ICJjMDc1YTdj
MS1mNjkzLTQ3YzUtYTY1Ni1mZGE0NTcwMGEwMWMiLAogICAgICAgICAgICAgICAgImFsdGVySWQi
IDogMjMzLAogICAgICAgICAgICAgICAgInNlY3VyaXR5IiA6ICJhdXRvIiwKICAgICAgICAgICAg
ICAgICJsZXZlbCIgOiAwCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAg
ICAicG9ydCIgOiA0NDMKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgICJ0YWci
IDogIjIzM3YyLmNvbV9saWdodHNhaWwuc2lsZW50cmVkLmNsdWIiLAogICAgICAic3RyZWFtU2V0
dGluZ3MiIDogewogICAgICAgICJzb2Nrb3B0IiA6IHsKCiAgICAgICAgfSwKICAgICAgICAicXVp
Y1NldHRpbmdzIiA6IHsKICAgICAgICAgICJrZXkiIDogIiIsCiAgICAgICAgICAiaGVhZGVyIiA6
IHsKICAgICAgICAgICAgInR5cGUiIDogIm5vbmUiCiAgICAgICAgICB9LAogICAgICAgICAgInNl
Y3VyaXR5IiA6ICJub25lIgogICAgICAgIH0sCiAgICAgICAgInRsc1NldHRpbmdzIiA6IHsKICAg
ICAgICAgICJhbGxvd0luc2VjdXJlIiA6IGZhbHNlLAogICAgICAgICAgImFscG4iIDogWwogICAg
ICAgICAgICAiaHR0cFwvMS4xIgogICAgICAgICAgXSwKICAgICAgICAgICJzZXJ2ZXJOYW1lIiA6
ICJsaWdodHNhaWwuc2lsZW50cmVkLmNsdWIiLAogICAgICAgICAgImFsbG93SW5zZWN1cmVDaXBo
ZXJzIiA6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAid3NTZXR0aW5ncyIgOiB7CiAgICAgICAg
ICAicGF0aCIgOiAiXC9nb2dvd3MyIiwKICAgICAgICAgICJoZWFkZXJzIiA6IHsKICAgICAgICAg
ICAgIkhvc3QiIDogImxpZ2h0c2FpbC5zaWxlbnRyZWQuY2x1YiIKICAgICAgICAgIH0KICAgICAg
ICB9LAogICAgICAgICJodHRwU2V0dGluZ3MiIDogewogICAgICAgICAgInBhdGgiIDogIiIsCiAg
ICAgICAgICAiaG9zdCIgOiBbCiAgICAgICAgICAgICIiCiAgICAgICAgICBdCiAgICAgICAgfSwK
ICAgICAgICAidGNwU2V0dGluZ3MiIDogewogICAgICAgICAgImhlYWRlciIgOiB7CiAgICAgICAg
ICAgICJ0eXBlIiA6ICJub25lIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImtjcFNl
dHRpbmdzIiA6IHsKICAgICAgICAgICJoZWFkZXIiIDogewogICAgICAgICAgICAidHlwZSIgOiAi
bm9uZSIKICAgICAgICAgIH0sCiAgICAgICAgICAibXR1IiA6IDEzNTAsCiAgICAgICAgICAiY29u
Z2VzdGlvbiIgOiBmYWxzZSwKICAgICAgICAgICJ0dGkiIDogMjAsCiAgICAgICAgICAidXBsaW5r
Q2FwYWNpdHkiIDogNSwKICAgICAgICAgICJ3cml0ZUJ1ZmZlclNpemUiIDogMSwKICAgICAgICAg
ICJyZWFkQnVmZmVyU2l6ZSIgOiAxLAogICAgICAgICAgImRvd25saW5rQ2FwYWNpdHkiIDogMjAK
ICAgICAgICB9LAogICAgICAgICJzZWN1cml0eSIgOiAidGxzIiwKICAgICAgICAibmV0d29yayIg
OiAid3MiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0YWciOiAiYmxvY2siLCAKICAgICAg
InByb3RvY29sIjogImJsYWNraG9sZSIsCiAgICAgICJzZXR0aW5ncyI6IHt9CiAgICB9LAogICAg
ewogICAgICAidGFnIjogImRpcmVjdCIsIAogICAgICAicHJvdG9jb2wiOiAiZnJlZWRvbSIsCiAg
ICAgICJzZXR0aW5ncyI6IHt9CiAgICB9CiAgXSwKICAicm91dGluZyIgOiB7CiAgICAibmFtZSIg
OiAiYnlwYXNzY25fcHJpdmF0ZV9hcHBsZSIsCiAgICAiZG9tYWluU3RyYXRlZ3kiIDogIklQSWZO
b25NYXRjaCIsCiAgICAiYmFsYW5jZXJzIiA6IFsKICAgICAgewogICAgICAgICJ0YWciIDogImJh
bGFuY2VfanBfbnkiLAogICAgICAgICJzZWxlY3RvciIgOiBbCiAgICAgICAgICAiMjMzdjIuY29t
X2xpZ2h0c2FpbC5zaWxlbnRyZWQuY2x1YiIsCgkgICIyMzN2Mi5jb21fbnkuc2lsZW50cmVkLmNs
dWIiCiAgICAgICAgXQogICAgICB9CiAgICBdLAogICAgInJ1bGVzIiA6IFsKICAgICAgewogICAg
ICAgICJ0eXBlIiA6ICJmaWVsZCIsCiAgICAgICAgIm91dGJvdW5kVGFnIiA6ICJkaXJlY3QiLAog
ICAgICAgICJkb21haW4iIDogWwogICAgICAgICAgImxvY2FsaG9zdCIsCiAgICAgICAgICAiZG9t
YWluOmhpd2lmaS5jb20iLAogICAgICAgICAgImRvbWFpbjptZS5jb20iLAogICAgICAgICAgImRv
bWFpbjpsb29rdXAtYXBpLmFwcGxlLmNvbSIsCiAgICAgICAgICAiZG9tYWluOmljbG91ZC1jb250
ZW50LmNvbSIsCiAgICAgICAgICAiZG9tYWluOmljbG91ZC5jb20iLAogICAgICAgICAgImRvbWFp
bjpjZG4tYXBwbGUuY29tIiwKICAgICAgICAgICJkb21haW46YXBwbGUtY2xvdWRraXQuY29tIiwK
ICAgICAgICAgICJkb21haW46YXBwbGUuY29tIiwKICAgICAgICAgICJkb21haW46YXBwbGUuY28i
LAogICAgICAgICAgImRvbWFpbjphYXBsaW1nLmNvbSIsCiAgICAgICAgICAiZG9tYWluOmd1enpv
bmkuYXBwbGUuY29tIiwKICAgICAgICAgICJnZW9zaXRlOmNuIgogICAgICAgIF0KICAgICAgfSwK
ICAgICAgewogICAgICAgICJ0eXBlIiA6ICJmaWVsZCIsCiAgICAgICAgIm91dGJvdW5kVGFnIiA6
ICJkaXJlY3QiLAogICAgICAgICJpcCIgOiBbCiAgICAgICAgICAiZ2VvaXA6cHJpdmF0ZSIsCiAg
ICAgICAgICAiZ2VvaXA6Y24iCiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgInR5
cGUiIDogImZpZWxkIiwKICAgICAgICAiYmFsYW5jZXJUYWciIDogImJhbGFuY2VfanBfbnkiLAog
ICAgICAgICJwb3J0IiA6ICIwLTY1NTM1IgogICAgICB9CiAgICBdCiAgfQp9Cg==
```


# ipup / ipdown 脚本

```
# ipup.sh

iptables -t nat -N V2RAY # 新建一个名为 V2RAY 的链
iptables -t nat -A V2RAY -d 192.168.199.4 -j RETURN # 拒绝本机转发 直连
iptables -t nat -A V2RAY -d 192.168.199.100 -j RETURN # 拒绝本机转发 直连
iptables -t nat -A V2RAY -d 0.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 10.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 127.0.0.0/8 -j RETURN
iptables -t nat -A V2RAY -d 169.254.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 172.16.0.0/12 -j RETURN
iptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURN
iptables -t nat -A V2RAY -d 224.0.0.0/4 -j RETURN
iptables -t nat -A V2RAY -d 240.0.0.0/4 -j RETURN
iptables -t nat -A V2RAY -p tcp -m set --match-set cn dst -j RETURN
iptables -t nat -A V2RAY -p tcp -j RETURN -m mark --mark 0xff # 直连 SO_MARK 为 0xff 的流量(0xff 是 16 进制数，数值上等同与上面配置的 255)，此规则目的是避免代理本机(网关)流量出现回环问题
iptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345 # 其余流量转发到 12345 端口（即 V2Ray）
iptables -t nat -A PREROUTING -p tcp -j V2RAY # 对局域网其他设备进行透明代理
#iptables -t nat -A OUTPUT -p tcp -j V2RAY # 对本机进行透明代理
#ip rule add fwmark 1 table 100
#ip route add local 0.0.0.0/0 dev lo table 100
#iptables -t mangle -N V2RAY_MASK
#iptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -j RETURN
#iptables -t mangle -A V2RAY_MASK -p udp -j TPROXY --on-port 12345 --tproxy-mark 1
#iptables -t mangle -A PREROUTING -p udp -j V2RAY_MASK

# ipdown.sh
iptables -t nat -F # 清空NAT
iptables -t nat -X # 清空自定义规则
iptables -t mangle -F
iptables -t mangle -X
```

添加上游DNS服务器，添加自定义DNS
```
# https://openwrt.org/docs/guide-user/base-system/dhcp
# 查看配置
uci -N show dhcp.@dnsmasq[0]

resolvfile='/tmp/resolv.conf.auto'，这个文件是上游DNS服务器，可以添加靠谱的IP, 例如 114.114.114.114

addnhosts 默认是空，可以设置添加自定义hosts; 或者直接添加在 /etc/hosts 中也可以。

```